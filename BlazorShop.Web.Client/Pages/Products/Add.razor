@page "/products/add"
@using BlazorShop.Data;
@attribute [Authorize(Roles = Constants.AdministratorRole)]

@if(categories == null) {
	<LoadingScreen />
} else {
	<h4 class="title-page text-center">添加商品</h4>
	<section class="section-content padding-y bg">
		<div class="container">
			<div class="row">
				<div class="card mx-auto">
					<article class="card-body">

						<EditForm Model="model" OnValidSubmit="SubmitAsync">

							<DataAnnotationsValidator />
							<ValidationSummary />


							<div class="form-group">
								<label>名称/标题</label>
								<input type="text" class="form-control" @bind="model.Name" @bind:event="oninput" @onkeyup="OnKeyup" />
							</div>

							<div class="form-group">
								<label>分类</label>
								<InputSelectNumber @bind-Value="model.CategoryId" class="form-control">
									@foreach(var category in categories) {
										<option value="@category.Id">@category.Name</option>
									}
								</InputSelectNumber>
							</div>

							<div class="form-row">
								<div class="col form-group">
									<label>价格</label>
									<InputNumber @bind-Value="model.Price" type="number" class="form-control" min="1" />
								</div>
								<div class="col form-group">
									<label>库存数量</label>
									<InputNumber @bind-Value="model.Quantity" type="number" class="form-control" min="1"/>
								</div>
							</div>

							<div class="form-group">
								<label>预览图</label>
								<InputText @bind-Value="model.ImageSource" type="url" class="form-control" />
								<img src="@model.ImageSource" style="width:100px" />
							</div>

							<div class="form-group">
								<label>摘要</label>
								<InputTextArea @bind-Value="model.Summary" rows="10" class="form-control"></InputTextArea>
							</div>

							<div class="form-group">
								<button type="submit" class="btn btn-block btn-primary">添加</button>
							</div>

						</EditForm>

					</article>
				</div>
			</div>
		</div>
	</section>
}

@code {
	[Parameter]
	public ProductsRequestModel model { get; set; } = new() {
		Price = 1m,
		Quantity = 9999,
	};

	private IEnumerable<CategoriesListingResponseModel> categories;

	private long ?bookCategoryId = 0;

	protected override async Task OnInitializedAsync() {
		this.categories = await this.CategoriesService.All();
		bookCategoryId = this.categories.Where(c => c.Name.Contains("书")).FirstOrDefault()?.Id;
	}

	private async Task SubmitAsync() {
		var id = await this.ProductsService.CreateAsync(this.model);
		this.NavigationManager.NavigateTo($"/products/{id}/{this.model.Name}");
	}

	private async Task OnKeyup() {
		if(model.Name!=null && model.Name.StartsWith("《") && model.Name.EndsWith("》")) {
			model.CategoryId = bookCategoryId ?? 0;
		}
		await Task.CompletedTask;
	}
}